import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import java.io.BufferedWriter
import java.io.FileInputStream
import java.io.FileWriter
import java.util.Properties
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    alias(libs.plugins.kotlinJvm)
    alias(libs.plugins.shadowJar)
    alias(libs.plugins.detekt)
    jacoco
}

group = "com.github.ai.kpdiff"
version = libs.versions.appVersion.get()

repositories {
    mavenCentral()
    maven("https://jitpack.io")
}

tasks.test {
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")
}

kotlin {
    jvmToolchain(11)
    compilerOptions {
        compilerOptions.jvmTarget.set(JvmTarget.JVM_11)
    }
}

tasks.jacocoTestReport {
    reports {
        val coverageDir = File("$buildDir/reports/coverage")
        csv.required.set(true)
        csv.outputLocation.set(File(coverageDir, "coverage.csv"))
        html.required.set(true)
        html.outputLocation.set(coverageDir)
    }

    classDirectories.setFrom(
        classDirectories.files.map {
            fileTree(it).matching {
                exclude("com/github/ai/kpdiff/di/**")
            }
        }
    )

    dependsOn(allprojects.map { it.tasks.named<Test>("test") })
}

tasks.classes {
    dependsOn("createPropertyFileWithVersion")
}

tasks.register("createPropertyFileWithVersion") {
    doLast {
        val propertyName = "version"
        val propsFile = File("$projectDir/src/main/resources/version.properties")
        val props = Properties()

        if (propsFile.exists()) {
            props.load(FileInputStream(propsFile))
        }

        if (props[propertyName] != libs.versions.appVersion.get()) {
            project.logger.lifecycle("Updating file: version.properties")
            props[propertyName] = libs.versions.appVersion.get()
            val parentFile = propsFile.parentFile
            if (!parentFile.exists()) {
                parentFile.mkdirs()
            }
            props.store(BufferedWriter(FileWriter(propsFile)), "File is generated by Gradle")
        }
    }
}

tasks {
    named<ShadowJar>("shadowJar") {
        archiveBaseName.set("kp-diff")
        mergeServiceFiles()
        manifest {
            attributes(mapOf("Main-Class" to "com.github.ai.kpdiff.MainKt"))
        }
    }
}

tasks {
    build {
        dependsOn(shadowJar)
    }

    shadowJar {
        archiveClassifier.set("") // Removes the '-all' suffix
    }
}

detekt {
    config.setFrom("detekt.yml")
}

dependencies {
    testImplementation(libs.junit)
    testImplementation(libs.kotest.runner)
    testImplementation(libs.kotest.assertions)
    testImplementation(libs.mockk)

    implementation(libs.koin)
    implementation(libs.keepassTreeDiff)
    implementation(libs.keepassTreeBuilder)
    implementation(libs.kotpass)
    implementation(libs.okio)
    implementation(libs.arrowCore)
    implementation(libs.arrowCoroutines)
}